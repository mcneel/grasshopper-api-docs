<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Extending the GUI (VB)</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="99cd32c8-7c1f-4f9a-87ea-76b032de7f70" /><meta name="Description" content="IntroductionDefault Functionality and GUIMenusInteractionDisplay" /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-3.3.1.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">Grasshopper API<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/723c01da-9986-4db2-8f53-6f3a7494df75.htm" title="Grasshopper API" tocid="roottoc">Grasshopper API</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/d113a9f0-6e27-46df-8316-2079c44382ac.htm" title="Examples" tocid="d113a9f0-6e27-46df-8316-2079c44382ac">Examples</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/b883d0c0-4947-48bc-8e9e-492a6d6c2a06.htm" title="Visual Basic .NET" tocid="6f9cd99e-bb58-4a4d-acb5-64fa636cee7c">Visual Basic .NET</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/b883d0c0-4947-48bc-8e9e-492a6d6c2a06.htm" title="Simple Component (VB)" tocid="b883d0c0-4947-48bc-8e9e-492a6d6c2a06">Simple Component (VB)</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/2824c770-2673-49a3-8683-1a70bc0349cc.htm" title="Simple Mathematics (VB)" tocid="2824c770-2673-49a3-8683-1a70bc0349cc">Simple Mathematics (VB)</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/4306b177-1bf1-41bc-ac0e-2f6869d02365.htm" title="Simple Geometry (VB)" tocid="4306b177-1bf1-41bc-ac0e-2f6869d02365">Simple Geometry (VB)</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/f9aa207f-3d19-414c-af01-1e5ad42a8cab.htm" title="Simple Data Types (VB)" tocid="f9aa207f-3d19-414c-af01-1e5ad42a8cab">Simple Data Types (VB)</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/0edd8dc9-32a7-40aa-b217-8e01e35e58bc.htm" title="Simple Parameters (VB)" tocid="0edd8dc9-32a7-40aa-b217-8e01e35e58bc">Simple Parameters (VB)</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/4db493ec-0bb3-4b73-943a-fdff03863e1d.htm" title="List Component (VB)" tocid="4db493ec-0bb3-4b73-943a-fdff03863e1d">List Component (VB)</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="../html/99cd32c8-7c1f-4f9a-87ea-76b032de7f70.htm" title="Extending the GUI (VB)" tocid="99cd32c8-7c1f-4f9a-87ea-76b032de7f70">Extending the GUI (VB)</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/ad6e93fe-e1c8-451e-a6d0-77cb8dd4516d.htm" title="Custom Attributes (VB)" tocid="ad6e93fe-e1c8-451e-a6d0-77cb8dd4516d">Custom Attributes (VB)</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/434018c0-6110-4478-bf2a-dcd099d8b8b2.htm" title="Custom Component Options (VB)" tocid="434018c0-6110-4478-bf2a-dcd099d8b8b2">Custom Component Options (VB)</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>Extending the GUI (VB)</h1></td></tr></table><span class="introStyle"></span> <p><ul><li><a href="#Introduction">Introduction</a></li><li><a href="#DefaultFuncAndGUI">Default Functionality and GUI</a></li><li><a href="#ExtendingMenus">Menus</a></li><li><a href="#ExtendingInteraction">Interaction</a></li><li><a href="#ExtendingDisplay">Display</a></li></ul></p><div class="introduction" id="Introduction"><p>
      This article describes how to extend the default behaviour, functionality and graphical user interface (GUI) 
      of Grasshopper document objects. We'll focus on components as you should be familiar with those from earlier 
      topics, but the same logic also applies to Parameters and custom objects.
      </p></div><div class="collapsibleAreaRegion" id="DefaultFuncAndGUI"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID0RB')" onkeypress="SectionExpandCollapse_CheckKey('ID0RB', event)" tabindex="0"><img id="ID0RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Default Functionality and GUI</span></div><div id="ID0RBSection" class="collapsibleSection"><p>
        When you derive a class from
        <a href="T_Grasshopper_Kernel_GH_Component.htm">GH_Component</a>
        or
        <a href="T_Grasshopper_Kernel_GH_Param_1.htm">GH_Param<span id="LSTD9603EC0_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTD9603EC0_0?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LSTD9603EC0_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTD9603EC0_1?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>
        you get a lot of functionality and GUI for free.
        It is quite important that all the objects in Grasshopper behave in a consistent and predictable fashion 
        so you typically don't need to override this default behaviour. However there can be cases where changing
        the default Grasshopper GUI is the best solution. Overriding the GUI is not exactly a trivial task, 
        there are a lot of different facets to this and I'll discuss the most important ones in this topic.
        </p><p>
        There are three common ways in which the default GUI can be altered:
        
        <ul><li>Menus</li><li>Interaction</li><li>Display</li></ul></p></div><div class="collapsibleAreaRegion" id="ExtendingMenus"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Menus</span></div><div id="ID2RBSection" class="collapsibleSection"><p>
        It is possibe to insert items into the default pop-up menus of objects, or even to completely alter 
        the menu layout. If your component for example can run in two different modes, you can choose to 
        expose an additional GUI option instead of an input parameter. These modes can then be toggled via 
        the component pop-up menu.
        </p><p>
        At the lowest level, pop-up menus are generated by the canvas when a right mouse button click is detected 
        over a component or parameter. The menu by default contains no items and it is the responsibility of said
        component or parameter to populate the menu. The top-level method which is in charge of this is 
        <a href="M_Grasshopper_Kernel_IGH_DocumentObject_AppendMenuItems.htm">AppendMenuItems</a>
        which is defined inside <span class="code">IGH_DocumentObject</span> and thus propagates to all objects on the canvas.
        </p><p>
        The <span class="code">GH_DocumentObject</span> abstract class does not create any menu items, so unless 
        this function is overridden, there will be no popup menu for a certain object. However, it is unlikely you derive 
        directly from <span class="code">GH_DocumentObject</span> so this should not be a problem. 
        <span class="code">GH_ActiveObject</span>, which is the base class for all objects on the canvas that 
        actually do something (Sketches and Scribbles don't "do" anything, hence they derive directly from 
        <span class="code">GH_DocumentObject</span>), does provide a default implementation of 
        <span class="code">AppendMenuItems()</span>. The default layout of popup menus is:
        
		<ul><li><p>NickName</p></li><li><p>Preview</p></li><li><p>Enabled</p></li><li><p>Bake</p></li><li><p>Warnings</p></li><li><p>Errors</p></li><li><p>Help</p></li></ul>

		Although if the object in question does not support previews or baking then those items will 
		be missing from the final menu. When overridden, <span class="code">AppendMenuItems()</span> allows you to completely 
		replace the default menu:
		
		<div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EABDACAAA_tab1" class="codeSnippetContainerTabSingle">VB</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EABDACAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EABDACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EABDACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">Public</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">Function</span> AppendMenuItems(<span class="highlight-keyword">ByVal</span> menu <span class="highlight-keyword">As</span> ToolStripDropDown) <span class="highlight-keyword">As</span> <span class="highlight-keyword">Boolean</span>
  Menu_AppendGenericMenuItem(menu, <span class="highlight-literal">"First item"</span>)
  Menu_AppendGenericMenuItem(menu, <span class="highlight-literal">"Second item"</span>)
  Menu_AppendGenericMenuItem(menu, <span class="highlight-literal">"Third item"</span>)
  Menu_AppendSeparator(menu)
  Menu_AppendGenericMenuItem(menu, <span class="highlight-literal">"Fourth item"</span>)
  Menu_AppendGenericMenuItem(menu, <span class="highlight-literal">"Fifth item"</span>)
  Menu_AppendGenericMenuItem(menu, <span class="highlight-literal">"Sixth item"</span>)

  <span class="highlight-comment">'Return True, otherwise the menu won't be shown.</span>
  <span class="highlight-keyword">Return</span> <span class="highlight-keyword">True</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EABDACAAA");</script><div class="mediaNear"><img src="../media/OverrideAppendMenuItems.png" /></div></p><p>
        If you want to insert additional items into the menu it would be very annoying if you had to recreate this
        default menu layout from scratch every single time. So eventhough you can override <span class="code">AppendMenuItems()</span>
        it is recommended you instead override <span class="code">AppendAdditionalMenuItems()</span> which allows you to insert
        custom menu items between Errors and Help without losing the standard functionality:
        
        <div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EABCACAAA_tab1" class="codeSnippetContainerTabSingle">VB</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EABCACAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EABCACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EABCACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">Public</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">Sub</span> AppendAdditionalMenuItems(<span class="highlight-keyword">ByVal</span> menu <span class="highlight-keyword">As</span> ToolStripDropDown)
  <span class="highlight-keyword">MyBase</span>.AppendAdditionalMenuItems(menu)

  Menu_AppendGenericMenuItem(menu, <span class="highlight-literal">"First item"</span>)
  Menu_AppendGenericMenuItem(menu, <span class="highlight-literal">"Second item"</span>)
  Menu_AppendGenericMenuItem(menu, <span class="highlight-literal">"Third item"</span>)
  Menu_AppendSeparator(menu)
  Menu_AppendGenericMenuItem(menu, <span class="highlight-literal">"Fourth item"</span>)
  Menu_AppendGenericMenuItem(menu, <span class="highlight-literal">"Fifth item"</span>)
  Menu_AppendGenericMenuItem(menu, <span class="highlight-literal">"Sixth item"</span>)
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EABCACAAA");</script><div class="mediaNear"><img src="../media/OverrideAppendAdditionalMenuItems.png" /></div></p><p><span class="code">GH_Param(Of T)</span> for example derives from <span class="code">GH_ActiveObject</span> and 
        re-implements <span class="code">AppendAdditionalMenuItems()</span> in order to
        supply the Wire Display, Disconnect, Reverse, Flatten and Graft menu items that are present in all parameters. 
        <span class="code">GH_Component</span>, likewise, derives from <span class="code">GH_ActiveObject</span> and it 
        re-implements <span class="code">AppendAdditionalMenuItems()</span> in order
        to insert the Shortest List, Longest List, Cross Reference and the parameter submenus.
        </p><p>
        Long story short; if you wish to insert additional menu items then either re-implement 
        <span class="code">AppendAdditionalMenuItems()</span> if you derive from 
        <span class="code">GH_Param(Of T)</span> or re-implement 
        <span class="code">AppendAdditionalComponentMenuItems()</span> if you derive from
        <span class="code">GH_Component</span>:
        
        <div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EAFAACAAA_tab1" class="codeSnippetContainerTabSingle">VB</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAFAACAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EAFAACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAFAACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">'If you implement IGH_Param, then override this method. If you implement IGH_Component, </span>
<span class="highlight-comment">'then override AppendAdditionalComponentMenuItems instead.</span>
<span class="highlight-keyword">Protected</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">Sub</span> AppendAdditionalMenuItems(<span class="highlight-keyword">ByVal</span> menu <span class="highlight-keyword">As</span> ToolstripDropDown)
  <span class="highlight-comment">'Place a call to the base class to ensure the default parameter menu</span>
  <span class="highlight-comment">'is still there and operational.</span>
  <span class="highlight-keyword">MyBase</span>.AppendAdditinalMenuItems(menu)

  <span class="highlight-comment">'Now insert your own custom menu items.</span>
  Menu_AppendGenericMenuItem(menu, <span class="highlight-literal">"My Custom Menu Item"</span>, <span class="highlight-keyword">Addressof</span> Menu_MyCustomItemClicked)
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>

<span class="highlight-keyword">Private</span> <span class="highlight-keyword">Sub</span> Menu_MyCustomItemClicked(<span class="highlight-keyword">ByVal</span> sender <span class="highlight-keyword">As</span> <span class="highlight-keyword">Object</span>, <span class="highlight-keyword">ByVal</span> e <span class="highlight-keyword">As</span> EventArgs)
  Rhino.RhinoApp.WriteLine(<span class="highlight-literal">"Alcohol doesn't affect me..."</span>)
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAFAACAAA");</script>
        
        There's a lot of menu utility functions provided by <span class="code">GH_DocumentObject</span>. 
        They all start with "Menu_" and they'll make it much easier to insert formatted menu items. 
        But of course nothing is stopping you from using typical <span class="code">System.Windows.Forms</span> 
        plumbing to extend the pop-up menu.
        </p></div><div class="collapsibleAreaRegion" id="ExtendingInteraction"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Interaction</span></div><div id="ID3RBSection" class="collapsibleSection"><p>
        You can also choose to handle specific mouse and keyboard events. You could for example choose to respond 
        to a mouse double-click event on your component. Complicated objects such as Gradients and Graph Mappers 
        handle all sorts of mouse events to provide grip-dragging functionality directly within the Grasshopper canvas. 
        
        todo: finish this section
        </p></div><div class="collapsibleAreaRegion" id="ExtendingDisplay"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Display</span></div><div id="ID4RBSection" class="collapsibleSection"><p>
        Finally, it is possible to override the way an object displays itself on the canvas. These alterations can be 
        minor, mere additions to the default display, or they can be radically different (as with the Gradient and 
        Graph Mapper objects). For a detailed explanation regarding display overrides, see the 
        <a href="ad6e93fe-e1c8-451e-a6d0-77cb8dd4516d.htm">Custom Attributes</a> 
        topic.
        </p></div></div></div><div id="pageFooter" class="pageFooter">Grasshopper for Rhino 7.16.22067.13000 (Last updated: 3/10/2022)<br />Copyright © 2009-2022 Robert McNeel &amp; Associates<p><a href="https://discourse.mcneel.com/c/grasshopper" target="_blank">Report wishes and bugs at discourse.mcneel.com</a></p></div></body></html>
<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>List Component (VB)</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="4db493ec-0bb3-4b73-943a-fdff03863e1d" /><meta name="Description" content="IntroductionList ParametersSolving Routine" /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-3.3.1.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">Grasshopper API<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/723c01da-9986-4db2-8f53-6f3a7494df75.htm" title="Grasshopper API" tocid="roottoc">Grasshopper API</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/d113a9f0-6e27-46df-8316-2079c44382ac.htm" title="Examples" tocid="d113a9f0-6e27-46df-8316-2079c44382ac">Examples</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/b883d0c0-4947-48bc-8e9e-492a6d6c2a06.htm" title="Visual Basic .NET" tocid="6f9cd99e-bb58-4a4d-acb5-64fa636cee7c">Visual Basic .NET</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/b883d0c0-4947-48bc-8e9e-492a6d6c2a06.htm" title="Simple Component (VB)" tocid="b883d0c0-4947-48bc-8e9e-492a6d6c2a06">Simple Component (VB)</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/2824c770-2673-49a3-8683-1a70bc0349cc.htm" title="Simple Mathematics (VB)" tocid="2824c770-2673-49a3-8683-1a70bc0349cc">Simple Mathematics (VB)</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/4306b177-1bf1-41bc-ac0e-2f6869d02365.htm" title="Simple Geometry (VB)" tocid="4306b177-1bf1-41bc-ac0e-2f6869d02365">Simple Geometry (VB)</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/f9aa207f-3d19-414c-af01-1e5ad42a8cab.htm" title="Simple Data Types (VB)" tocid="f9aa207f-3d19-414c-af01-1e5ad42a8cab">Simple Data Types (VB)</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/0edd8dc9-32a7-40aa-b217-8e01e35e58bc.htm" title="Simple Parameters (VB)" tocid="0edd8dc9-32a7-40aa-b217-8e01e35e58bc">Simple Parameters (VB)</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="../html/4db493ec-0bb3-4b73-943a-fdff03863e1d.htm" title="List Component (VB)" tocid="4db493ec-0bb3-4b73-943a-fdff03863e1d">List Component (VB)</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/99cd32c8-7c1f-4f9a-87ea-76b032de7f70.htm" title="Extending the GUI (VB)" tocid="99cd32c8-7c1f-4f9a-87ea-76b032de7f70">Extending the GUI (VB)</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/ad6e93fe-e1c8-451e-a6d0-77cb8dd4516d.htm" title="Custom Attributes (VB)" tocid="ad6e93fe-e1c8-451e-a6d0-77cb8dd4516d">Custom Attributes (VB)</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/434018c0-6110-4478-bf2a-dcd099d8b8b2.htm" title="Custom Component Options (VB)" tocid="434018c0-6110-4478-bf2a-dcd099d8b8b2">Custom Component Options (VB)</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>List Component (VB)</h1></td></tr></table><span class="introStyle"></span> <p><ul><li><a href="#Introduction">Introduction</a></li><li><a href="#ListParameters">List Parameters</a></li><li><a href="#SolveInstance">Solving Routine</a></li></ul></p><div class="introduction" id="Introduction"><p>
      So far the example components have all operated on individual data items. This is known as One-In-One-Out. 
      But what if you want to operate on more than one item at a time; One-In-Many-Out, Many-In-One-Out or Many-In-Many-Out? 
      This requires that input or output parameters have a non-standard 
      <a href="T_Grasshopper_Kernel_GH_ParamAccess.htm">Grasshopper.Kernel<span id="LSTB2854E14_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTB2854E14_0?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>GH_ParamAccess</a>
      flag.
      </p></div><div class="collapsibleAreaRegion" id="ListParameters"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />List Parameters</span></div><div id="ID1RBSection" class="collapsibleSection"><p>
        Input and Output parameters that are part of Grasshopper components have an access flag that affects how the component
        treats data stored in these parameters. Take for example the Polyline component. It creates a <em>single</em> 
        polyline object from a <em>collection</em> of corner-points. This is a Many-In-One-Out kind of logic. The Divide
        component creates a whole bunch of division points from a single curve. This is an example of One-In-Many-Out. The Cull components 
        remove certain items from lists, this is an example of Many-In-Many-Out.
        </p><p>
        Most often components treat their inputs and outputs as parameters that provide individual instances of data, 
        rather than related collections of data. This is indicated by all parameters having an 
        <a href="T_Grasshopper_Kernel_GH_ParamAccess.htm">GH_ParamAccess<span id="LSTB2854E14_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTB2854E14_1?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>item</a>
        access flag. You can however assign different access flags to parameters. Preferably this flag should be assigned only once, 
        namely in the 
        <a href="M_Grasshopper_Kernel_GH_Component_RegisterInputParams.htm">RegisterInputParams</a>
        or 
        <a href="M_Grasshopper_Kernel_GH_Component_RegisterOutputParams.htm">RegisterOutputParams</a>
        method overrides. It is legal to modify an access flag as long as a solution is not currently in progress, but it is not recommended.
        </p><p>
        In this tutorial, we'll be writing a component that removes (culls) the bottom-most N objects in a collection of geometric shapes. 
        As inputs we'll need a collection of geometry and an integer indicating how many objects the user wants to remove, and as output we'll 
        provide the same collection of geometry, but with the bottom-most objects missing. This is therefore a Many-In-Many-Out case.
        </p><p>
        The Component code (without the RegisterInputParams, RegisterOutputParams and SolveInstance methods) may look like this:
        
        <div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAJAABAAA_tab1" class="codeSnippetContainerTabSingle">VB</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAJAABAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAJAABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAJAABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">Public</span> <span class="highlight-keyword">Class</span> Component_CullByElevation
  <span class="highlight-keyword">Inherits</span> GH_Component

  <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Sub</span> <span class="highlight-keyword">New</span>()
    <span class="highlight-keyword">MyBase</span>.<span class="highlight-keyword">New</span>(<span class="highlight-literal">"Cull Elevation"</span>, <span class="highlight-literal">"CullZ"</span>, <span class="highlight-literal">"Cull objects by relative elevation"</span>, <span class="highlight-literal">"Sets"</span>, <span class="highlight-literal">"Sequence"</span>)
  <span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>

  <span class="highlight-keyword">Protected</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">ReadOnly</span> <span class="highlight-keyword">Property</span> Icon() <span class="highlight-keyword">As</span> System.Drawing.Bitmap
    <span class="highlight-keyword">Get</span>
      <span class="highlight-keyword">Return</span> My.Resources.TheIconNameForThisComponent
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Get</span>
  <span class="highlight-keyword">End</span> <span class="highlight-keyword">Property</span>
  <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">ReadOnly</span> <span class="highlight-keyword">Property</span> Exposure() <span class="highlight-keyword">As</span> Kernel.GH_Exposure
    <span class="highlight-keyword">Get</span>
      <span class="highlight-keyword">Return</span> GH_Exposure.primary <span class="highlight-keyword">Or</span> GH_Exposure.obscure
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Get</span>
  <span class="highlight-keyword">End</span> <span class="highlight-keyword">Property</span>
  <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">ReadOnly</span> <span class="highlight-keyword">Property</span> ComponentGuid() <span class="highlight-keyword">As</span> System.Guid
    <span class="highlight-keyword">Get</span>
      <span class="highlight-keyword">Return</span> <span class="highlight-keyword">New</span> Guid(<span class="highlight-literal">"{A8FF9CBA-0837-4cd6-9198-0D17325D3F8F}"</span>)
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Get</span>
  <span class="highlight-keyword">End</span> <span class="highlight-keyword">Property</span>

  <span class="highlight-comment">'...further example code will come here...</span>

<span class="highlight-keyword">End</span> <span class="highlight-keyword">Class</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAJAABAAA");</script>
        
        We'll need to register the parameters as well, and we'll use the overloaded methods to immediately assign the correct parameter access flags.
        
        <div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAHAABAAA_tab1" class="codeSnippetContainerTabSingle">VB</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAHAABAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAHAABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAHAABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">Protected</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">Sub</span> RegisterInputParams(<span class="highlight-keyword">ByVal</span> pManager <span class="highlight-keyword">As</span> Kernel.GH_Component.GH_InputParamManager)
  <span class="highlight-comment">'list access is non-standard, so we need to specifically assign it.</span>
  pManager.AddGeometryParameter(<span class="highlight-literal">"Geometry"</span>, <span class="highlight-literal">"G"</span>, <span class="highlight-literal">"Geometry to cull"</span>, GH_ParamAccess.list)
  pManager.AddIntegerParameter(<span class="highlight-literal">"Count"</span>, <span class="highlight-literal">"C"</span>, <span class="highlight-literal">"Number of objects to cull"</span>, GH_ParamAccess.item, <span class="highlight-number">1</span>)
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>
<span class="highlight-keyword">Protected</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">Sub</span> RegisterOutputParams(<span class="highlight-keyword">ByVal</span> pManager <span class="highlight-keyword">As</span> Kernel.GH_Component.GH_OutputParamManager)
  <span class="highlight-comment">'Again, we need to specify list access as that is not default.</span>
  pManager.AddGeometryParameter(<span class="highlight-literal">"Geometry"</span>, <span class="highlight-literal">"G"</span>, <span class="highlight-literal">"Culled geometry"</span>, GH_ParamAccess.list)
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAHAABAAA");</script>
		
		Input parameters rigorously enforce their access. You are only allowed to retrieve individual items from inputs that have the 
		<a href="T_Grasshopper_Kernel_GH_ParamAccess.htm">GH_ParamAccess<span id="LSTB2854E14_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTB2854E14_2?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>item</a>
		flag set. Lists can only be retrieved when the access is set to 
		<a href="T_Grasshopper_Kernel_GH_ParamAccess.htm">GH_ParamAccess<span id="LSTB2854E14_3"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTB2854E14_3?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>list</a>
		and data trees can only be gotten from a 
		<a href="T_Grasshopper_Kernel_GH_ParamAccess.htm">GH_ParamAccess<span id="LSTB2854E14_4"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTB2854E14_4?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>tree</a>
		parameter. Failure to do so will result in an error message at runtime. Output parameter are more flexible, 
		but this is only because output access was added only in Grasshopper 0.9.0001 and strict enforcement would result 
		in SDK breakage with previous versions.
        </p></div><div class="collapsibleAreaRegion" id="SolveInstance"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Solving Routine</span></div><div id="ID2RBSection" class="collapsibleSection"><p>
        The SolveInstance implementation is basically identical to previous examples, the only difference is the way the component
        interacts with the parameters.
        
        <div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAAAAAAA_tab1" class="codeSnippetContainerTabSingle">VB</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAAAAAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAAAAAAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAAAAAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">Protected</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">Sub</span> SolveInstance(<span class="highlight-keyword">ByVal</span> DA <span class="highlight-keyword">As</span> Kernel.IGH_DataAccess)
  <span class="highlight-comment">'Declare a new List(Of T) to hold your data.</span>
  <span class="highlight-comment">'This list cannot be a null reference. </span>
  <span class="highlight-keyword">Dim</span> geometry <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> List(<span class="highlight-keyword">Of</span> IGH_GeometricGoo)
  <span class="highlight-keyword">Dim</span> count <span class="highlight-keyword">As</span> Int32 = <span class="highlight-number">0</span>

  <span class="highlight-comment">'Retrieve the whole list using DA.GetDataList().</span>
  <span class="highlight-keyword">If</span> (<span class="highlight-keyword">Not</span> DA.GetDataList(<span class="highlight-number">0</span>, geometry)) <span class="highlight-keyword">Then</span> <span class="highlight-keyword">Return</span>
  <span class="highlight-keyword">If</span> (<span class="highlight-keyword">Not</span> DA.GetData(<span class="highlight-number">1</span>, count)) <span class="highlight-keyword">Then</span> <span class="highlight-keyword">Return</span>

  <span class="highlight-comment">'Validate inputs.</span>
  <span class="highlight-keyword">If</span> (count &lt; <span class="highlight-number">0</span>) <span class="highlight-keyword">Then</span>
    AddRuntimeMessage(GH_RuntimeMessageLevel.<span class="highlight-keyword">Error</span>, <span class="highlight-literal">"Count must be a positive integer"</span>)
    <span class="highlight-keyword">Return</span>
  <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

  <span class="highlight-comment">'The number of objects to cull is larger than or </span>
  <span class="highlight-comment">'equal to the total number of objects. I.e. cull them all.</span>
  <span class="highlight-keyword">If</span> (geometry.Count &lt;= count) <span class="highlight-keyword">Then</span> <span class="highlight-keyword">Return</span>

  <span class="highlight-comment">'Iteratively remove the lowest object from the list.</span>
  <span class="highlight-keyword">For</span> N <span class="highlight-keyword">As</span> Int32 = <span class="highlight-number">1</span> <span class="highlight-keyword">To</span> count
    <span class="highlight-keyword">Dim</span> lowestElevation <span class="highlight-keyword">As</span> <span class="highlight-keyword">Double</span> = <span class="highlight-keyword">Double</span>.MaxValue
    <span class="highlight-keyword">Dim</span> lowestIndex <span class="highlight-keyword">As</span> Int32 = <span class="highlight-number">-1</span>

    <span class="highlight-comment">'Iterate over all remaining geometry and find the lowest one.</span>
    <span class="highlight-keyword">For</span> i <span class="highlight-keyword">As</span> Int32 = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> geometry.Count - <span class="highlight-number">1</span>
      <span class="highlight-keyword">If</span> (geometry(i) <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span>) <span class="highlight-keyword">Then</span> <span class="highlight-keyword">Continue</span> <span class="highlight-keyword">For</span>
      <span class="highlight-keyword">Dim</span> bbox <span class="highlight-keyword">As</span> BoundingBox = geometry(i).Boundingbox
      <span class="highlight-keyword">If</span> (<span class="highlight-keyword">Not</span> bbox.IsValid) <span class="highlight-keyword">Then</span> <span class="highlight-keyword">Continue</span> <span class="highlight-keyword">For</span>

      <span class="highlight-keyword">Dim</span> localElevation <span class="highlight-keyword">As</span> <span class="highlight-keyword">Double</span> = bbox.Min.Z
      <span class="highlight-keyword">If</span> (localElevation &lt; lowestElevation) <span class="highlight-keyword">Then</span>
        lowestElevation = localElevation
        lowestIndex = i
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-keyword">Next</span>

    <span class="highlight-comment">'Delete the lowest object.</span>
    <span class="highlight-keyword">If</span> (lowestIndex &gt;= <span class="highlight-number">0</span>) <span class="highlight-keyword">Then</span> geometry.RemoveAt(lowestIndex)
  <span class="highlight-keyword">Next</span>

  <span class="highlight-comment">'Assign the remaining geometry using the DA.SetDataList() method.</span>
  DA.SetDataList(<span class="highlight-number">0</span>, geometry)
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAAAAAAA");</script></p></div></div></div><div id="pageFooter" class="pageFooter">Grasshopper for Rhino 7.16.22067.13000 (Last updated: 3/10/2022)<br />Copyright © 2009-2022 Robert McNeel &amp; Associates<p><a href="https://discourse.mcneel.com/c/grasshopper" target="_blank">Report wishes and bugs at discourse.mcneel.com</a></p></div></body></html>
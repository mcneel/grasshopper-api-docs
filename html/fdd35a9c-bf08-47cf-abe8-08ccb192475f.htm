<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Simple Mathematics (C#)</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="fdd35a9c-bf08-47cf-abe8-08ccb192475f" /><meta name="Description" content="IntroductionInput parametersOutput parametersSolveInstance" /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-3.3.1.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">Grasshopper API<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/723c01da-9986-4db2-8f53-6f3a7494df75.htm" title="Grasshopper API" tocid="roottoc">Grasshopper API</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/d113a9f0-6e27-46df-8316-2079c44382ac.htm" title="Examples" tocid="d113a9f0-6e27-46df-8316-2079c44382ac">Examples</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/730f0792-7bfb-4310-a416-239e8c315645.htm" title="C#" tocid="a2ed4605-af35-4bfa-bfc5-9c4857c19c4f">C#</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/730f0792-7bfb-4310-a416-239e8c315645.htm" title="Simple Component (C#)" tocid="730f0792-7bfb-4310-a416-239e8c315645">Simple Component (C#)</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="../html/fdd35a9c-bf08-47cf-abe8-08ccb192475f.htm" title="Simple Mathematics (C#)" tocid="fdd35a9c-bf08-47cf-abe8-08ccb192475f">Simple Mathematics (C#)</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/5764fa15-29d1-4e37-8496-2478d3cf28dc.htm" title="Simple Geometry (C#)" tocid="5764fa15-29d1-4e37-8496-2478d3cf28dc">Simple Geometry (C#)</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/d823ee90-ea94-4a8a-a972-df5d006a8d9f.htm" title="Simple Data Types (C#)" tocid="d823ee90-ea94-4a8a-a972-df5d006a8d9f">Simple Data Types (C#)</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/fbfe5e40-ba8d-4e53-97c6-27572e049835.htm" title="Simple Parameters (C#)" tocid="fbfe5e40-ba8d-4e53-97c6-27572e049835">Simple Parameters (C#)</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/020a5098-963f-4da8-bf65-650993c73bcb.htm" title="List Component (C#)" tocid="020a5098-963f-4da8-bf65-650993c73bcb">List Component (C#)</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/a367a8b3-a8b6-4d92-ad15-00b5aa60fd48.htm" title="Extending the GUI (C#)" tocid="a367a8b3-a8b6-4d92-ad15-00b5aa60fd48">Extending the GUI (C#)</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/8a7974ab-7b2b-4f48-84d0-6e81b184e6b0.htm" title="Custom Attributes (C#)" tocid="8a7974ab-7b2b-4f48-84d0-6e81b184e6b0">Custom Attributes (C#)</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/5f6a9f31-8838-40e6-ad37-a407be8f2c15.htm" title="Custom Component Options (C#)" tocid="5f6a9f31-8838-40e6-ad37-a407be8f2c15">Custom Component Options (C#)</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>Simple Mathematics (C#)</h1></td></tr></table><span class="introStyle"></span> <p><ul><li><a href="#Introduction">Introduction</a></li><li><a href="#InputParameters">Input parameters</a></li><li><a href="#OutputParameters">Output parameters</a></li><li><a href="#SolveInstance">SolveInstance</a></li></ul></p><div class="introduction" id="Introduction"><p>
      This article contains a brief example of a component that deals with some simple mathematics and 
      multiple input and output parameters. We'll discuss parameter order, legacy support for changing 
      component layouts and default values for input parameters. We will not be dealing with any of the 
      basics of component development. You should have read the
      <a href="730f0792-7bfb-4310-a416-239e8c315645.htm">My First Component</a> topic before 
      starting this one.
      </p><p>
      For this component we'll bundle the Sine(), Cosine() and Tangent() trigonometry functions while 
      allowing inputs to be specified in either Radians or Degrees. We'll need to define two input 
      parameter (one of which will have a default value) and three output parameters.
      </p><p>
      Before you start with this topic, create a new class that derives from Grasshopper.Kernel.GH_Component, 
      as outlined in the <a href="730f0792-7bfb-4310-a416-239e8c315645.htm">My First Component</a> topic.
      </p></div><div class="collapsibleAreaRegion" id="InputParameters"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Input parameters</span></div><div id="ID1RBSection" class="collapsibleSection"><p>
        This component will require two input parameters, one of which has a default value. We'll need
        to register these parameters inside the <span class="code">RegisterInputParams()</span> method:
        
        <div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAJCACAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAJCACAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAJCACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAJCACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">...
<span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> RegisterInputParams(GH_Component.GH_InputParamManager pManager)
{
  pManager.AddNumberParameter(<span class="highlight-literal">"Angle"</span>, <span class="highlight-literal">"A"</span>, <span class="highlight-literal">"The angle to measure"</span>, GH_ParamAccess.item);
  pManager.AddBooleanParameter(<span class="highlight-literal">"Radians"</span>, <span class="highlight-literal">"R"</span>, <span class="highlight-literal">"Work in Radians"</span>, GH_ParamAccess.item, <span class="highlight-keyword">true</span>); <span class="highlight-comment">// The default value is 'true'</span>
}
...</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAJCACAAA");</script>
        
        The first parameter is of type Double meaning it accepts floating 
        point values. It only has a name, abbreviation, description and access level defined. The second parameter 
        is of type <span class="code">bool</span> and it will accept <span class="code">true</span> and <span class="code">false</span> values. 
        The <span class="code">pManager</span> object allows us to specify a single default value for many parameter types.
        </p><p>
        The order in which we register the parameters is also the order in which they'll appear on the component. 
        We should not change the order (or the types, or the number) of the parameters once the component has been
        released to the world. Every Grasshopper file that was saved with one of our components will
        expect to be deserialized by the exact same component layout. If you add an additional parameter to an 
        component and someone tries to open a file which was saved while an older version of that component, 
        it will fail to deserialize as the data in the file no longer matches the new layout. An exception 
        will be thrown and Grasshopper will short circuit that particular instance. The entire component and 
        all connections to it will be missing when the file is eventually displayed to the user.
        </p><p>
        If you <em>must</em> change the parameter layout of a component, you should create a
        completely new <span class="code">GH_Component</span> class with a different <span class="code">ComponentGuid</span>, 
        while maintaining the old component type
        for legacy file purposes. You can hide xomponents from the Grasshopper GUI by overriding the 
        <a href="P_Grasshopper_Kernel_IGH_DocumentObject_Exposure.htm">Exposure</a>
        property of the <span class="code">GH_Component</span> class and changing the return value to <span class="code">GH_Exposure.hidden</span>:
        
        <div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAAACAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAAACAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAAAACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAAACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> Grasshopper.Kernel.GH_Exposure Exposure 
{
  <span class="highlight-keyword">get</span> { <span class="highlight-keyword">return</span> GH_Exposure.hidden; }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAAACAAA");</script></p></div><div class="collapsibleAreaRegion" id="OutputParameters"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Output parameters</span></div><div id="ID2RBSection" class="collapsibleSection"><p>
		Our component will also need three output parameters. Output parameters differ from input parameters 
		in that they have much fewer options. Users cannot add expressions to them, there are no default values, 
		they don't support persistent data. Outputs are always cleared when the component expires, and they are
		slowly filled out from within the <span class="code">SolveInstance()</span> routine.

        <div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAAABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAAABAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAAAABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAAABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">...
<span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
{
  pManager.AddNumberParameter(<span class="highlight-literal">"Sin"</span>, <span class="highlight-literal">"sin"</span>, <span class="highlight-literal">"The sine of the Angle."</span>, GH_ParamAccess.item);
  pManager.AddNumberParameter(<span class="highlight-literal">"Cos"</span>, <span class="highlight-literal">"cos"</span>, <span class="highlight-literal">"The cosine of the Angle."</span>, GH_ParamAccess.item);
  pManager.AddNumberParameter(<span class="highlight-literal">"Tan"</span>, <span class="highlight-literal">"tan"</span>, <span class="highlight-literal">"The tangent of the Angle."</span>, GH_ParamAccess.item);
}
...</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAAABAAA");</script></p></div><div class="collapsibleAreaRegion" id="SolveInstance"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />SolveInstance</span></div><div id="ID3RBSection" class="collapsibleSection"><p>
		The <span class="code">SolveInstance()</span> implementation for this component is hardly any more complicated than 
		it was for <a href="730f0792-7bfb-4310-a416-239e8c315645.htm">My First Component</a>. 
		The only difference is that we now have more than one parameter on each side.

        <div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAAAAAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAAAAAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAAAAAAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAAAAAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">...
<span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> SolveInstance(IGH_DataAccess DA)
{
  <span class="highlight-comment">// Declare variables to contain all inputs.</span>
  <span class="highlight-comment">// We can assign some initial values that are either sensible or indicative.</span>
  <span class="highlight-keyword">double</span> angle = <span class="highlight-keyword">double</span>.NaN;
  <span class="highlight-keyword">bool</span> radians = <span class="highlight-keyword">false</span>;

  <span class="highlight-comment">// Use the DA object to retrieve the data inside the input parameters.</span>
  <span class="highlight-comment">// If the retrieval fails (for example if there is no data) we need to abort.</span>
  <span class="highlight-keyword">if</span> (!DA.GetData(<span class="highlight-number">0</span>, <span class="highlight-keyword">ref</span> angle)) { <span class="highlight-keyword">return</span>; }
  <span class="highlight-keyword">if</span> (!DA.GetData(<span class="highlight-number">1</span>, <span class="highlight-keyword">ref</span> radians)) { <span class="highlight-keyword">return</span>; }

  <span class="highlight-comment">// If the angle value is not a valid number, we should abort.</span>
  <span class="highlight-keyword">if</span> (!Rhino.RhinoMath.IsValidDouble(angle)) { <span class="highlight-keyword">return</span>; }

  <span class="highlight-comment">// If the user wants to work in degrees rather than radians, </span>
  <span class="highlight-comment">// we assume that angle is defined in degrees. </span>
  <span class="highlight-comment">// We need to convert it into Radians again.</span>
  <span class="highlight-keyword">if</span> (!radians)
  {
    angle = Rhino.RhinoMath.ToRadians(angle);
  }

  <span class="highlight-comment">// Now we are ready to assign the outputs via the DA object.</span>
  <span class="highlight-comment">// Since the Sin(), Cos() and Tan() never fail, we might as well </span>
  <span class="highlight-comment">// combine them with the assignment.</span>
  DA.SetData(<span class="highlight-number">0</span>, Math.Sin(angle));
  DA.SetData(<span class="highlight-number">1</span>, Math.Cos(angle));
  DA.SetData(<span class="highlight-number">2</span>, Math.Tan(angle));
}
...</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAAAAAAA");</script></p></div></div></div><div id="pageFooter" class="pageFooter">Grasshopper for Rhino 7.18.22124.03000 (Last updated: 5/10/2022)<br />Copyright © 2009-2022 Robert McNeel &amp; Associates<p><a href="https://discourse.mcneel.com/c/grasshopper" target="_blank">Report wishes and bugs at discourse.mcneel.com</a></p></div></body></html>
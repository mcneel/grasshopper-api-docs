<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Custom Component Options (VB)</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="434018c0-6110-4478-bf2a-dcd099d8b8b2" /><meta name="Description" content="IntroductionClass Level variables(De)serialization of custom dataContext menu changes" /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-3.3.1.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">Grasshopper API<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/723c01da-9986-4db2-8f53-6f3a7494df75.htm" title="Grasshopper API" tocid="roottoc">Grasshopper API</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/d113a9f0-6e27-46df-8316-2079c44382ac.htm" title="Examples" tocid="d113a9f0-6e27-46df-8316-2079c44382ac">Examples</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/b883d0c0-4947-48bc-8e9e-492a6d6c2a06.htm" title="Visual Basic .NET" tocid="93a88552-c0a4-48df-95c3-f14f1717034e">Visual Basic .NET</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/b883d0c0-4947-48bc-8e9e-492a6d6c2a06.htm" title="Simple Component (VB)" tocid="b883d0c0-4947-48bc-8e9e-492a6d6c2a06">Simple Component (VB)</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/2824c770-2673-49a3-8683-1a70bc0349cc.htm" title="Simple Mathematics (VB)" tocid="2824c770-2673-49a3-8683-1a70bc0349cc">Simple Mathematics (VB)</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/4306b177-1bf1-41bc-ac0e-2f6869d02365.htm" title="Simple Geometry (VB)" tocid="4306b177-1bf1-41bc-ac0e-2f6869d02365">Simple Geometry (VB)</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/f9aa207f-3d19-414c-af01-1e5ad42a8cab.htm" title="Simple Data Types (VB)" tocid="f9aa207f-3d19-414c-af01-1e5ad42a8cab">Simple Data Types (VB)</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/0edd8dc9-32a7-40aa-b217-8e01e35e58bc.htm" title="Simple Parameters (VB)" tocid="0edd8dc9-32a7-40aa-b217-8e01e35e58bc">Simple Parameters (VB)</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/4db493ec-0bb3-4b73-943a-fdff03863e1d.htm" title="List Component (VB)" tocid="4db493ec-0bb3-4b73-943a-fdff03863e1d">List Component (VB)</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/99cd32c8-7c1f-4f9a-87ea-76b032de7f70.htm" title="Extending the GUI (VB)" tocid="99cd32c8-7c1f-4f9a-87ea-76b032de7f70">Extending the GUI (VB)</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/ad6e93fe-e1c8-451e-a6d0-77cb8dd4516d.htm" title="Custom Attributes (VB)" tocid="ad6e93fe-e1c8-451e-a6d0-77cb8dd4516d">Custom Attributes (VB)</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="../html/434018c0-6110-4478-bf2a-dcd099d8b8b2.htm" title="Custom Component Options (VB)" tocid="434018c0-6110-4478-bf2a-dcd099d8b8b2">Custom Component Options (VB)</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>Custom Component Options (VB)</h1></td></tr></table><span class="introStyle"></span> <p><ul><li><a href="#Introduction">Introduction</a></li><li><a href="#ClassLevelVariables">Class Level variables</a></li><li><a href="#Deserialization">(De)serialization of custom data</a></li><li><a href="#ContextMenu">Context menu changes</a></li></ul></p><div class="introduction" id="Introduction"><p>
      This article discusses how to add custom options to a component and have them included in *.gh/*.ghx 
      (de)serialization. It skips over some portions of Component design which have already been handled 
      in previous topics, so do not read this article before familiarizing yourself with the 
      <a href="b883d0c0-4947-48bc-8e9e-492a6d6c2a06.htm">My First Component</a> topic.
      </p><p>
      The component we'll create in this article will sort a list of numbers and have the custom option 
      to convert those numbers to absolute values prior to sorting. However, rather than providing this option
      as a boolean input parameter, we'll allow people to set it via the Component context menu. 
      We'll need to do four special things to achieve this, to wit:
      <ul><li>Declare a class level variable/property.</li><li>Provide access to the variable from within the Component menu.</li><li>Include the variable in (de)serialization.</li><li>Record undo events when changing the value.</li></ul></p><p>
      Before you start with this topic, create a new class that derives from 
      <a href="T_Grasshopper_Kernel_GH_Component.htm">GH_Component</a>, 
      as outlined in the <a href="b883d0c0-4947-48bc-8e9e-492a6d6c2a06.htm">My First Component</a> topic.
      </p><p>
        This component will require one input parameter and one output parameter, both of type Number with list access:
       
        <div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAGADAAA_tab1" class="codeSnippetContainerTabSingle">VB</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAGADAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAGADAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAGADAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">...
<span class="highlight-keyword">Protected</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">Sub</span> RegisterInputParams(<span class="highlight-keyword">ByVal</span> pManager <span class="highlight-keyword">As</span> GH_Component.GH_InputParamManager)
  pManager.AddNumberParameter(<span class="highlight-literal">"Values"</span>, <span class="highlight-literal">"V"</span>, <span class="highlight-literal">"Values to sort"</span>, GH_ParamAccess.list)
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>
<span class="highlight-keyword">Protected</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">Sub</span> RegisterOutputParams(<span class="highlight-keyword">ByVal</span> pManager <span class="highlight-keyword">As</span> Kernel.GH_Component.GH_OutputParamManager)
  pManager.AddNumberParameter(<span class="highlight-literal">"Values"</span>, <span class="highlight-literal">"V"</span>, <span class="highlight-literal">"Sorted values"</span>, GH_ParamAccess.list)
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>
...</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAGADAAA");</script>
        
        Assuming for now we'll have a local property called <span class="code">Absolute()</span> which gets a single boolean, we can also 
        already write the <span class="code">SolveInstance()</span> method:
        
        <div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAADAAA_tab1" class="codeSnippetContainerTabSingle">VB</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAADAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAAADAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAADAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">...
<span class="highlight-keyword">Protected</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">Sub</span> SolveInstance(<span class="highlight-keyword">ByVal</span> DA <span class="highlight-keyword">As</span> Kernel.IGH_DataAccess)
  <span class="highlight-keyword">Dim</span> values <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> List(<span class="highlight-keyword">Of</span> <span class="highlight-keyword">Double</span>)
  <span class="highlight-keyword">If</span> (<span class="highlight-keyword">Not</span> DA.GetDataList(<span class="highlight-number">0</span>, values)) <span class="highlight-keyword">Then</span> <span class="highlight-keyword">Return</span>
  <span class="highlight-keyword">If</span> (values.Count = <span class="highlight-number">0</span>) <span class="highlight-keyword">Then</span> <span class="highlight-keyword">Return</span>

  <span class="highlight-comment">'Don't worry about where the Absolute property comes from, we'll get to it soon.</span>
  <span class="highlight-keyword">If</span> (Absolute) <span class="highlight-keyword">Then</span> 
    <span class="highlight-keyword">For</span> i <span class="highlight-keyword">As</span> Int32 = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> values.Count - <span class="highlight-number">1</span>
      values(i) = Math.Abs(values(i))
    <span class="highlight-keyword">Next</span>
  <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

  values.Sort()
  DA.SetDataList(<span class="highlight-number">0</span>, values)
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>
...</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAADAAA");</script></p></div><div class="collapsibleAreaRegion" id="ClassLevelVariables"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Class Level variables</span></div><div id="ID1RBSection" class="collapsibleSection"><p>
      The 'Absolute' option for this component applies to the entire object, but not to other instances of this component. 
      Since it needs to survive (i.e. retain its value) for as long as the component lives, it has to be declared as a class level variable:
      
      <div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAVBACAAA_tab1" class="codeSnippetContainerTabSingle">VB</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAVBACAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAVBACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAVBACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">...
<span class="highlight-keyword">Private</span> m_absolute <span class="highlight-keyword">As</span> <span class="highlight-keyword">Boolean</span> = <span class="highlight-keyword">False</span>
<span class="highlight-keyword">Public</span> <span class="highlight-keyword">Property</span> Absolute() <span class="highlight-keyword">As</span> <span class="highlight-keyword">Boolean</span>
  <span class="highlight-keyword">Get</span>
    <span class="highlight-keyword">Return</span> m_absolute
  <span class="highlight-keyword">End</span> <span class="highlight-keyword">Get</span>
  <span class="highlight-keyword">Set</span>(<span class="highlight-keyword">ByVal</span> value <span class="highlight-keyword">As</span> <span class="highlight-keyword">Boolean</span>)
    m_absolute = value
    <span class="highlight-keyword">If</span> (m_absolute) <span class="highlight-keyword">Then</span>
      Message = <span class="highlight-literal">"Absolute"</span>
    <span class="highlight-keyword">Else</span>
      Message = <span class="highlight-literal">"Standard"</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
  <span class="highlight-keyword">End</span> <span class="highlight-keyword">Set</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Property</span>
...</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAVBACAAA");</script>
      
      The <span class="code">m_absolute</span> field is a private field (only accessible from within this component) and it is exposed publicly via the 
      <span class="code">Absolute()</span> property, which allows both getting and setting. Furthermore, whenever the <span class="code">m_absolute</span> field is set, 
      the <span class="code">Absolute()</span> property ensures that the correct message is assigned. The 
      <a href="P_Grasshopper_Kernel_GH_Component_Message.htm">Message</a> field on <span class="code">GH_Component</span> allows
      you to set a string which will be displayed underneath the component on the canvas. This is to signal to users that there's an option they can change which 
      is not directly accessible via the input parameters. Note that the message is not set <em>until</em> the
      <span class="code">Absolute()</span> property is accessed, so you should specifically place a call to <span class="code">Absolute = False</span> 
      (or <span class="code">True</span>) in the constructor.
      </p><p>
      It is of course possible to add any number of custom fields to a component, but you can only attach a single message, if you have more than one field you want to
      make the user aware of, you'll need to get creative.
      </p></div><div class="collapsibleAreaRegion" id="Deserialization"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />(De)serialization of custom data</span></div><div id="ID2RBSection" class="collapsibleSection"><p>
      When you add options or states to your component which need to be 'sticky', you'll also need to (de)serialize them correctly. (De)serialization 
      is used when saving and opening files, when copying and pasting objects and during undo/redo actions. In this particular case, we only need to 
      add a single boolean to the standard file archive. Serialization in Grasshopper happens using the GH_IO.dll methods and types, not via standard 
      framework mechanisms such as the <a href="https://docs.microsoft.com/dotnet/api/system.serializableattribute" target="_blank">SerializableAttribute</a>.
      </p><p>
      Override the 
      <a href="M_Grasshopper_Kernel_GH_Component_Write.htm">Write</a>
      and 
      <a href="M_Grasshopper_Kernel_GH_Component_Read.htm">Read</a> 
      methods on GH_Component and be sure to always call the base implementation.
      <div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAAABAAA_tab1" class="codeSnippetContainerTabSingle">VB</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAAABAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAAAABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAAABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">...
<span class="highlight-keyword">Public</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">Function</span> Write(<span class="highlight-keyword">ByVal</span> writer <span class="highlight-keyword">As</span> GH_IO.Serialization.GH_IWriter) <span class="highlight-keyword">As</span> <span class="highlight-keyword">Boolean</span>
  <span class="highlight-comment">'First add our own field.</span>
  writer.SetBoolean(<span class="highlight-literal">"Absolute"</span>, Absolute)
  <span class="highlight-comment">'Then call the base class implementation.</span>
  <span class="highlight-keyword">Return</span> <span class="highlight-keyword">MyBase</span>.Write(writer)
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>
<span class="highlight-keyword">Public</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">Function</span> Read(<span class="highlight-keyword">ByVal</span> reader <span class="highlight-keyword">As</span> GH_IO.Serialization.GH_IReader) <span class="highlight-keyword">As</span> <span class="highlight-keyword">Boolean</span>
  <span class="highlight-comment">'First read our own field.</span>
  Absolute = reader.GetBoolean(<span class="highlight-literal">"Absolute"</span>)
  <span class="highlight-comment">'Then call the base class implementation.</span>
  <span class="highlight-keyword">Return</span> <span class="highlight-keyword">MyBase</span>.Read(reader)
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>
...</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAAABAAA");</script></p></div><div class="collapsibleAreaRegion" id="ContextMenu"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Context menu changes</span></div><div id="ID3RBSection" class="collapsibleSection"><p>
      We'll also need to add an additional menu item to the component context menu, then handle the click event for that item. 
      Adding items to a context menu is best done via the 
      <a href="M_Grasshopper_Kernel_GH_Component_AppendAdditionalComponentMenuItems.htm">AppendAdditionalComponentMenuItems</a>
      method. It allows you to insert anu number of item in between the Bake and the Help items. The easiest way to add menu items is to use the Shared methods on 
      <a href="T_Grasshopper_Kernel_GH_DocumentObject.htm">GH_DocumentObject</a> 
      such as
      <a href="Overload_Grasshopper_Kernel_GH_DocumentObject_Menu_AppendItem.htm">Menu_AppendItem</a> 
      or one of the overloads. In this case we also want to assign a tooltip text to the item which cannot be done from inside <span class="code">Menu_AppendItem()</span>.
      
      <div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAABAAAAA_tab1" class="codeSnippetContainerTabSingle">VB</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAABAAAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAABAAAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAABAAAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">...
<span class="highlight-keyword">Protected</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">Sub</span> AppendAdditionalComponentMenuItems(<span class="highlight-keyword">ByVal</span> menu <span class="highlight-keyword">As</span> System.Windows.Forms.ToolStripDropDown)
  <span class="highlight-comment">'Append the item to the menu, making sure it's always enabled and checked if Absolute is True.</span>
  <span class="highlight-keyword">Dim</span> item <span class="highlight-keyword">As</span> ToolStripMenuItem = Menu_AppendItem(menu, <span class="highlight-literal">"Absolute"</span>, <span class="highlight-keyword">AddressOf</span> Menu_AbsoluteClicked, <span class="highlight-keyword">True</span>, Absolute)
  <span class="highlight-comment">'Specifically assign a tooltip text to the menu item.</span>
  item.ToolTipText = <span class="highlight-literal">"When checked, values are made absolute prior to sorting."</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>
...</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAABAAAAA");</script></p><p>
      When this menu item is clicked, the delegate assigned inside the <span class="code">Menu_AppendItem()</span> method will be invoked. It is here 
      that we must handle a click event. There are usually three steps involved in handling clicks; Record the current state as an undo event, 
      change the state, trigger a new solution:
      
      <div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAHAAAAAA_tab1" class="codeSnippetContainerTabSingle">VB</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAHAAAAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAHAAAAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAHAAAAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">...
<span class="highlight-keyword">Private</span> <span class="highlight-keyword">Sub</span> Menu_AbsoluteClicked(<span class="highlight-keyword">ByVal</span> sender <span class="highlight-keyword">As</span> <span class="highlight-keyword">Object</span>, <span class="highlight-keyword">ByVal</span> e <span class="highlight-keyword">As</span> EventArgs)
  RecordUndoEvent(<span class="highlight-literal">"Absolute"</span>)
  Absolute = <span class="highlight-keyword">Not</span> Absolute
  ExpireSolution(<span class="highlight-keyword">True</span>)
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>
...</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAHAAAAAA");</script>
      
      Since our <span class="code">Write()</span> and <span class="code">Read()</span> methods handle the (de)serialization of the Absolute field, 
      we can use the default 
      <a href="Overload_Grasshopper_Kernel_GH_DocumentObject_RecordUndoEvent.htm">RecordUndoEvent</a>
      method. It is possible to define your own undo records, but that is a topic for another day.
      </p></div></div></div><div id="pageFooter" class="pageFooter">Grasshopper for Rhino 7.18.22124.03000 (Last updated: 5/10/2022)<br />Copyright © 2009-2022 Robert McNeel &amp; Associates<p><a href="https://discourse.mcneel.com/c/grasshopper" target="_blank">Report wishes and bugs at discourse.mcneel.com</a></p></div></body></html>